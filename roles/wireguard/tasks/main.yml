---
- name: WireGuard repository configured
  apt_repository:
    repo: ppa:wireguard/wireguard
    state: present

- name: WireGuard installed
  apt:
    name: wireguard
    state: present
    update_cache: true

- name: WireGuard reload-module-on-update
  file:
    dest: /etc/wireguard/.reload-module-on-update
    state: touch

- name: Configure unattended-upgrades
  copy:
    src: 50-wireguard-unattended-upgrades
    dest: /etc/apt/apt.conf.d/50-wireguard-unattended-upgrades
    owner: root
    group: root
    mode: 0644

- set_fact:
    service_name: "wg-quick@{{ wireguard_interface }}"

- name: Ensure the required directories exist
  file:
    dest: "{{ wireguard_pki_path }}/{{ item }}"
    state: directory
    recurse: true
  with_items:
    - private
    - public

- name: Delete the lock files
  file:
    dest: "/etc/wireguard/private_{{ item }}.lock"
    state: absent
  with_items:
    - "{{ users }}"
    - "{{ server_ip }}"

- name: Generate private keys
  command: wg genkey
  register: wg_genkey
  args:
    creates: "/etc/wireguard/private_{{ item }}.lock"
  with_items:
    - "{{ users }}"
    - "{{ server_ip }}"

- block:
  - name: Save private keys
    copy:
      dest: "{{ wireguard_pki_path }}/private/{{ item['item'] }}"
      content: "{{ item['stdout'] }}"
      mode: "0600"
    when: item.changed
    with_items: "{{ wg_genkey['results'] }}"

  - name: Touch the lock file
    file:
      dest: "/etc/wireguard/private_{{ item }}.lock"
      state: touch
    with_items:
      - "{{ users }}"
      - "{{ server_ip }}"
  when: wg_genkey.changed

- name: Generate public keys
  shell: echo "{{ lookup('file', wireguard_pki_path + '/private/' + item) }}" | wg pubkey
  register: wg_pubkey
  changed_when: false
  args:
    executable: bash
  with_items:
    - "{{ users }}"
    - "{{ server_ip }}"

- name: Save public keys
  copy:
    dest: "{{ wireguard_pki_path }}/public/{{ item['item'] }}"
    content: "{{ item['stdout'] }}"
    mode: "0600"
  no_log: true
  with_items: "{{ wg_pubkey['results'] }}"
  delegate_to: localhost
  become: false

- name: WireGuard user list updated
  lineinfile:
    dest: "{{ wireguard_pki_path }}/index.txt"
    create: true
    mode: "0600"
    insertafter: EOF
    line: "{{ item }}"
  register: lineinfile
  with_items: "{{ users }}"

- set_fact:
    wireguard_users: "{{ (lookup('file', wireguard_pki_path + 'index.txt')).split('\n') }}"

- name: WireGuard users config generated
  template:
    src: client.conf.j2
    dest: "{{ wireguard_config_path }}/{{ item.1 }}.conf"
    mode: "0600"
  with_indexed_items:  "{{ wireguard_users }}"
  when: item.1 in users
  vars:
    index: "{{ item.0 }}"

- name: Generate QR codes
  shell: >
    umask 077;
    which segno &&
    segno --scale=5 --output={{ item.1 }}.png \
      "{{ lookup('template', 'client.conf.j2') }}" || true
  changed_when: false
  with_indexed_items:  "{{ wireguard_users }}"
  when: item.1 in users
  vars:
    index: "{{ item.0 }}"
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
  args:
    chdir: "{{ wireguard_config_path }}"
    executable: bash

- name: WireGuard configured
  template:
    src: server.conf.j2
    dest: "/etc/wireguard/{{ wireguard_interface }}.conf"
    mode: "0600"
  notify: restart wireguard

- name: WireGuard enabled and started
  service:
    name: "{{ service_name }}"
    state: started
    enabled: true

- meta: flush_handlers
